const char *INDEX_HTML_HEAD = R"=====(<!DOCTYPE html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"><title>Microwave</title><style> :root {--bg-color: rgb(0, 0, 0);--fg-color: rgb(255, 255, 255);--timer-color: rgb(123, 0, 123);}html, body {margin: 0px;padding: 0px;width: 100svw;min-height: 100svh;background-color: var(--bg-color);color: var(--fg-color);font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;overflow: hidden;}* {box-sizing: border-box;}body {display: flex;flex-direction: column;gap: 10svmin;align-items: center;justify-content: center;}@property --p {syntax: "<percentage>";initial-value: 0%;inherits: true;}@property --minutes {syntax: "<integer>";initial-value: 0;inherits: true;}@property --seconds {syntax: "<integer>";initial-value: 0;inherits: true;}@property --time {syntax: "<integer>";initial-value: 0;inherits: true;}#timer {width: 75svmin;height: 75svmin;border-radius: 100%;border: 3.125svmin solid var(--timer-color);display: flex;flex-direction: column;gap: 0.5svmin;align-items: center;justify-content: center;mask: linear-gradient(white, white) padding-box, conic-gradient(transparent var(--p), white 0%) border-box;div {flex-basis: 33%;display: flex;flex-direction: column;align-items: center;&:nth-child(2) {justify-content: center;}&:nth-child(3) {justify-content: flex-start;}}label {font-variant-numeric: tabular-nums;padding: 0.5svmin 0;border-bottom: 0.5svmin solid var(--bg-color);&:focus-within {filter: grayscale(0);border-bottom-color: var(--timer-color);}&[for="timeInput"] {font-size: 10svmin;counter-reset: minutes min(round(to-zero, var(--time)) / 60, var(--minutes)) seconds calc(mod(var(--time), 60) + (round(to-zero, var(--time) / 60) - var(--minutes)) * 60);}&[for="powerInput"] {font-size: 5svmin;span {width: 3ch;text-align: end;display: inline-block;}}input[type=number] {position: absolute;opacity: 0;width: 0px;}}}#timeOutputMinutes::after {content: counter(minutes, decimal-leading-zero);}#timeOutputSeconds::after {content: counter(seconds, decimal-leading-zero);}</style><script>)=====";
const char *INDEX_HTML_REST = R"=====(</script></head><body><div id="timer"><div></div><div><label for="timeInput"><span id="timeOutputMinutes"></span>:<span id="timeOutputSeconds"></span><input id="timeInput" inputmode="decimal" pattern="[0-9]{1,4}" type="number" enterkeyhint="done" autocomplete="off"></label></div><div><label for="powerInput"><span id="powerOutput">100</span>%<input id="powerInput" inputmode="decimal" pattern="[0-9]{1,4}" type="number" enterkeyhint="done" autocomplete="off"></label></div></div><button id="start">Start</button><script>const timer=document.getElementById("timer"),startButton=document.getElementById("start");startButton.addEventListener("click",start,!0);const timeOutput=document.getElementById("timeOutput"),timeInput=document.getElementById("timeInput");timeInput.addEventListener("focus",(()=>hasSentTime=!1),!0),timeInput.addEventListener("keypress",timePress,!0),timeInput.addEventListener("blur",sendTime,!0);const powerOutput=document.getElementById("powerOutput"),powerInput=document.getElementById("powerInput");powerInput.addEventListener("focus",(()=>hasSentPower=!1),!0),powerInput.addEventListener("keypress",powerPress,!0),powerInput.addEventListener("blur",sendPower,!0);let animation,internalIsRunning=initialIsRunning,internalMinutes=initialMinutes,hasSentTime=!1,internalSeconds=initialSeconds,internalPower=initialPower,hasSentPower=!1;function timePress(n){"Enter"===n.key&&(hasSentTime=!1,sendTime());const e=parseInt(n.key);null==e||isNaN(e)||(internalMinutes>9&&(internalMinutes=0,internalSeconds=0),internalSeconds*=10,internalSeconds+=e,internalMinutes*=10,internalMinutes+=Math.floor(internalSeconds/100),internalSeconds%=100,renderTime())}function renderTime(){timer.style.setProperty("--minutes",internalMinutes),timer.style.setProperty("--seconds",internalSeconds),timer.style.setProperty("--time",60*internalMinutes+internalSeconds)}function powerPress(n){"Enter"===n.key&&(hasSentPower=!1,sendPower());const e=parseInt(n.key);null==e||isNaN(e)||(internalPower>99&&(internalPower=0),internalPower*=10,internalPower+=e,internalPower>100&&(internalPower=100),renderPower())}function renderPower(){powerOutput.innerText=internalPower.toString()}function animate(n,e,t){for(const n of timer.getAnimations())n.cancel();const i=60*n+e;Math.floor(t/60);timer.style.setProperty("--minutes",internalMinutes),timer.style.setProperty("--seconds",internalSeconds),animation=timer.animate([{"--p":`${Math.round(100*(1-t/i))}%`,"--time":t,offset:0},{"--p":"100%","--time":0,offset:1}],{duration:1e3*t,iterations:1}),animation.finished.then(onTimerEnd).catch((()=>{}))}function onTimerEnd(){timeInput.disabled=!1,powerInput.disabled=!1,renderTime(),startButton.innerText="Start",internalIsRunning=!1}async function start(){const n=await fetch("./state",{method:"PUT",body:JSON.stringify({isRunning:!internalIsRunning})});console.log("Start response: ",n);const e=await n.json();console.log("Start json: ",e),internalIsRunning?(timeInput.disabled=!1,powerInput.disabled=!1,animation?.cancel(),renderTime(),startButton.innerText="Start"):(timeInput.disabled=!0,powerInput.disabled=!0,animate(internalMinutes,internalSeconds,60*internalMinutes+internalSeconds),startButton.innerText="Stop"),internalIsRunning=!internalIsRunning}async function sendTime(){if(hasSentTime)return;const n=await fetch("./state",{method:"PUT",body:JSON.stringify({minutes:internalMinutes,seconds:internalSeconds})});await n.json();hasSentTime=!0}async function sendPower(){if(hasSentPower)return;const n=await fetch("./state",{method:"PUT",body:JSON.stringify({power:internalPower})});await n.json();hasSentPower=!0}initialIsRunning?(timeInput.disabled=!0,powerInput.disabled=!0,animate(internalMinutes,internalSeconds,initialRemainingInSeconds),startButton.innerText="Stop"):renderTime();</script></body></html>)=====";
